A!	SinkC2020-1.0.34075	2.0	Java

X	c:01/000	com.ibm.saguaro.system.Assembly
X	c:01/001	com.ibm.saguaro.system.Util
X	c:01/002	com.ibm.saguaro.system.Timer
X	c:01/003	com.ibm.saguaro.system.Time
X	c:01/004	com.ibm.saguaro.system.MoteException
X	c:01/005	com.ibm.saguaro.system.Device
X	c:01/006	com.ibm.saguaro.system.SDev
X	c:01/007	com.ibm.saguaro.system.CDev
X	c:01/008	com.ibm.saguaro.system.OutOfResourcesException
X	c:01/009	com.ibm.saguaro.system.OsException
X	c:01/00A	com.ibm.saguaro.system.NullReferenceException
X	c:01/00B	com.ibm.saguaro.system.SystemException
X	c:01/00C	com.ibm.saguaro.system.Mote
X	c:01/00D	com.ibm.saguaro.system.LIP
X	c:01/00E	com.ibm.saguaro.system.LED
X	c:01/00F	com.ibm.saguaro.system.InvalidCastException
X	c:01/010	com.ibm.saguaro.system.IndexOutOfRangeException
X	c:01/011	com.ibm.saguaro.system.I2C
X	c:01/012	com.ibm.saguaro.system.GPIO
X	c:01/013	com.ibm.saguaro.system.Err
X	c:01/014	com.ibm.saguaro.system.DeviceException
X	c:01/015	com.ibm.saguaro.system.SPI
X	c:01/016	com.ibm.saguaro.system.Radio
X	c:01/017	com.ibm.saguaro.system.WLIP
X	c:01/018	com.ibm.saguaro.system.ArrayTypeMismatchException
X	c:01/019	com.ibm.saguaro.system.ArithmException
X	c:01/01A	com.ibm.saguaro.system.ArgumentException
X	c:01/01B	com.ibm.saguaro.system.AccessException
X	c:01/01C	com.ibm.saguaro.system.ADC
X	c:02/000	com.ibm.saguaro.logger.Logger

C!	c:005	embs.EvalSink	-1	0	c:000
R	tsend	r:com.ibm.saguaro.system.Timer	0	0
R	trec	r:com.ibm.saguaro.system.Timer	0	1
R	tstop	r:com.ibm.saguaro.system.Timer	0	2
R	tstart	r:com.ibm.saguaro.system.Timer	0	3
R	xmit	c[]	0	4
R	radio	r:com.ibm.saguaro.system.Radio	0	5
F	light	z	0	0
F	active	z	0	1
F	listening	z	0	2
F	first	z	0	3
F	wait	l	0	4
F	n	i	0	6
F	nc	i	0	7
F	t	i	0	8
F	channel	c	0	9
F	panid	c	0	10
F	address	c	0	11
H	Sink_C_Inactive_discarded$UTF8	b[]	0	83,105,110,107,32,67,32,73,110,97,99,116,105,118,101,32,40,100,105,115,99,97,114,100,101,100,41,32
H	Sink_C_Listening_discarded$UTF8	b[]	0	83,105,110,107,32,67,32,76,105,115,116,101,110,105,110,103,32,40,100,105,115,99,97,114,100,101,100,41,32
H	Sink_C_Listening_first_2$UTF8	b[]	0	83,105,110,107,32,67,32,76,105,115,116,101,110,105,110,103,32,40,102,105,114,115,116,41,58,32,43,50,32
H	Sink_C_Not_listening_3$UTF8	b[]	0	83,105,110,107,32,67,32,78,111,116,32,108,105,115,116,101,110,105,110,103,58,32,45,51,32
M!	EvalSink(r:embs.EvalSink)v	-1	m:00B7	0016E	4
M	access$000(i,c[],i,i,l)i	-1	m:00B9	00172	14
M	onReceive(i,c[],i,i,l)i	-1	m:00C0	00180	126
M!	periodicSend(c,l)v	-1	m:00FF	001FE	86
M!	restart(c,l)v	-1	m:012A	00254	32
M!	stop(c,l)v	-1	m:013A	00274	14
M!	stopRX(c,l)v	-1	m:0141	00282	38

C	c:007	com.ibm.saguaro.system.$tatics	-1	-1	c:01/000
r	embs.EvalSink.tsend	r:com.ibm.saguaro.system.Timer	-1	0
r	embs.EvalSink.trec	r:com.ibm.saguaro.system.Timer	-1	1
r	embs.EvalSink.tstop	r:com.ibm.saguaro.system.Timer	-1	2
r	embs.EvalSink.tstart	r:com.ibm.saguaro.system.Timer	-1	3
r	embs.EvalSink.xmit	c[]	-1	4
r	embs.EvalSink.radio	r:com.ibm.saguaro.system.Radio	-1	5
f	embs.EvalSink.light	z	-1	0
f	embs.EvalSink.active	z	-1	1
f	embs.EvalSink.listening	z	-1	2
f	embs.EvalSink.first	z	-1	3
f	embs.EvalSink.wait	l	-1	4
f	embs.EvalSink.n	i	-1	6
f	embs.EvalSink.nc	i	-1	7
f	embs.EvalSink.t	i	-1	8
f	embs.EvalSink.channel	c	-1	9
f	embs.EvalSink.panid	c	-1	10
f	embs.EvalSink.address	c	-1	11
M	__init()v	-1	m:0012	00024	330

c	00031	0	12	0	12	0	m:0012
c	00035	0	13	0	13	0	m:0012
c	00039	0	14	0	14	0	m:0012
c	0003D	0	15	0	15	0	m:0012
c	00041	0	22	0	22	0	m:0012
c	0004B	0	23	0	23	0	m:0012
c	0004F	0	26	0	26	0	m:0012
c	00055	0	29	0	29	0	m:0012
c	00059	0	30	0	30	0	m:0012
c	0005E	0	31	0	31	0	m:0012
c	00063	0	35	0	35	0	m:0012
c	0006F	0	39	0	39	0	m:0012
c	00078	0	43	0	43	0	m:0012
c	00082	0	44	0	44	0	m:0012
c	0008B	0	47	0	47	0	m:0012
c	000A0	0	50	0	50	0	m:0012
c	000A6	0	51	0	51	0	m:0012
c	000AC	0	52	0	52	0	m:0012
c	000B4	0	53	0	53	0	m:0012
c	000BF	0	54	0	54	0	m:0012
c	000C8	0	55	0	55	0	m:0012
c	000D4	0	56	0	56	0	m:0012
c	000E0	0	58	0	58	0	m:0012
c	000EA	0	64	0	64	0	m:0012
c	000F4	0	73	0	73	0	m:0012
c	000FE	0	74	0	74	0	m:0012
c	00108	0	82	0	82	0	m:0012
c	00112	0	83	0	83	0	m:0012
c	0011C	0	91	0	91	0	m:0012
c	00126	0	92	0	92	0	m:0012
c	00130	0	100	0	100	0	m:0012
c	0013B	0	103	0	103	0	m:0012
c	0014A	0	108	0	108	0	m:0012
c	00154	0	109	0	109	0	m:0012
c	0015E	0	116	0	116	0	m:0012
c	0016D	0	121	0	121	0	m:0012
e	0016E	m:0012
c	00171	0	6	0	6	0	m:00B7
l!	00171	00172	r:embs.EvalSink	this	m:00B7	0
e!	00172	m:00B7
c	00175	0	6	0	6	0	m:00B9
l	00175	0017F	i	x0	m:00B9	0
l	00175	0017F	c[]	x1	m:00B9	1
l	00175	0017F	i	x2	m:00B9	2
l	00175	0017F	i	x3	m:00B9	3
l	00175	0017F	l	x4	m:00B9	4
e	00180	m:00B9
c	00183	0	125	0	125	0	m:00C0
l	00183	001FE	i	flags	m:00C0	0
l	00183	001FE	c[]	data	m:00C0	1
l	00183	001FE	i	len	m:00C0	2
l	00183	001FE	i	info	m:00C0	3
l	00183	001FE	l	time	m:00C0	4
c	00186	0	126	0	126	0	m:00C0
c	0019B	0	127	0	127	0	m:00C0
c	0019D	0	133	0	133	0	m:00C0
c	001A2	0	134	0	134	0	m:00C0
c	001A9	0	137	0	137	0	m:00C0
c	001AE	0	139	0	139	0	m:00C0
c	001BA	0	143	0	143	0	m:00C0
c	001C4	0	144	0	144	0	m:00C0
c	001C9	0	145	0	145	0	m:00C0
c	001CF	0	146	0	146	0	m:00C0
c	001D5	0	149	0	149	0	m:00C0
c	001DD	0	154	0	154	0	m:00C0
c	001E2	0	155	0	155	0	m:00C0
c	001EA	0	158	0	158	0	m:00C0
c	001F0	0	161	0	161	0	m:00C0
c	001F8	0	162	0	162	0	m:00C0
c	001FC	0	165	0	165	0	m:00C0
e	001FE	m:00C0
c	00201	0	173	0	173	0	m:00FF
l!	00201	00254	c	param	m:00FF	0
l!	00201	00254	l	time	m:00FF	1
c	00207	0	175	0	175	0	m:00FF
c	0020C	0	177	0	177	0	m:00FF
c	0021E	0	179	0	179	0	m:00FF
c	00227	0	180	0	180	0	m:00FF
c	0022F	0	181	0	181	0	m:00FF
c	0023D	0	185	0	185	0	m:00FF
c	00241	0	186	0	186	0	m:00FF
c	00245	0	189	0	189	0	m:00FF
c	0024E	0	192	0	192	0	m:00FF
c	00253	0	196	0	196	0	m:00FF
e!	00254	m:00FF
c	00257	0	202	0	202	0	m:012A
l!	00257	00273	c	param	m:012A	0
l!	00257	00273	l	time	m:012A	1
c	0025D	0	203	0	203	0	m:012A
c	00267	0	204	0	204	0	m:012A
c	00272	0	206	0	206	0	m:012A
e!	00274	m:012A
c	00277	0	227	0	227	0	m:013A
l!	00277	00281	c	param	m:013A	0
l!	00277	00281	l	time	m:013A	1
c	0027B	0	230	0	230	0	m:013A
c	00280	0	233	0	233	0	m:013A
e!	00282	m:013A
c	00285	0	213	0	213	0	m:0141
l!	00285	002A7	c	param	m:0141	0
l!	00285	002A7	l	time	m:0141	1
c	0028A	0	215	0	215	0	m:0141
c	0028E	0	216	0	216	0	m:0141
c	00292	0	219	0	219	0	m:0141
c	002A6	0	221	0	221	0	m:0141
e!	002A8	m:0141
S	C:\lsi\code\moterunnerworkspace\MRExamples\src\EvalSink.java
:	package embs;
:	
:	import com.ibm.saguaro.system.*;
:	import com.ibm.saguaro.logger.*;
:	
:	public class EvalSink {
:	
:	    private static Timer  tsend;
:	    private static Timer  trec;
:	    private static Timer  tstop;
:	    private static Timer  tstart;
:	    private static boolean light=false;
:	    private static boolean active=true;
:	    private static boolean listening=false;
:	    private static boolean first=false;
:	    
:	    
:	    
:	    
:	    private static byte[] xmit;
:	    private static long   wait;
:	    static Radio radio = new Radio();
:	    private static int n = 4; // number of beacons of sync phase 
:	    private static int nc;
:	    
:	    private static int t = 770; // milliseconds between beacons  
:	    
:	    // settings for sink C
:	    private static byte channel = 2; 
:	    private static byte panid = 0x13;
:	    private static byte address = 0x13;
:	
:	    static {
:	        // Open the default radio
:	        radio.open(Radio.DID, null, 0, 0);
:	        
:	        
:	        // Set channel 
:	        radio.setChannel((byte)channel);
:	        
:	        
:	        // Set the PAN ID and the short address
:	        radio.setPanId(panid, true);
:	        radio.setShortAddr(address);
:	        
:	        // listens continuously
:			radio.startRx(Device.ASAP, 0, Time.currentTicks()+0x7FFFFFFF);        
:			
:	        // Prepare beacon frame with source and destination addressing
:	        xmit = new byte[12];
:	        xmit[0] = Radio.FCF_BEACON;
:	        xmit[1] = Radio.FCA_SRC_SADDR|Radio.FCA_DST_SADDR;
:	        Util.set16le(xmit, 3, panid); // destination PAN address 
:	        Util.set16le(xmit, 5, 0xFFFF); // broadcast address 
:	        Util.set16le(xmit, 7, panid); // own PAN address 
:	        Util.set16le(xmit, 9, address); // own short address 
:	
:	        xmit[11] = (byte)n;
:	
:	
:	
:			
:			// register delegate for received frames
:	        radio.setRxHandler(new DevCallback(null){
:	                public int invoke (int flags, byte[] data, int len, int info, long time) {
:	                    return  EvalSink.onReceive(flags, data, len, info, time);
:	                }
:	            });
:	
:	
:	        
:	        // Setup a periodic timer callback for beacon transmissions
:	        tsend = new Timer();
:	        tsend.setCallback(new TimerEvent(null){
:	                public void invoke(byte param, long time){
:	                    EvalSink.periodicSend(param, time);
:	                }
:	            });
:	            
:	
:	        // Setup a callback for the end of the reception phase
:	        trec = new Timer();
:	        trec.setCallback(new TimerEvent(null){
:	                public void invoke(byte param, long time){
:	                    EvalSink.stopRX(param, time);
:	                }
:	            });            
:	        
:	        
:	        // Setup a periodic timer callback to restart the protocol
:	        tstart = new Timer();
:	        tstart.setCallback(new TimerEvent(null){
:	                public void invoke(byte param, long time){
:	                    EvalSink.restart(param, time);
:	                }
:	            });
:	
:	            
:	        // Convert the periodic delay from ms to platform ticks
:	        wait = Time.toTickSpan(Time.MILLISECS, t);
:	        
:	        
:	        tstart.setAlarmBySpan(Time.toTickSpan(Time.SECONDS, 5)); //starts the protocol 5 seconds after constructing the assembly
:	        
:	        
:	        
:	        // Setup a timer and a callback to finish the evaluation
:	        tstop = new Timer();
:	        tstop.setCallback(new TimerEvent(null){
:	                public void invoke(byte param, long time){
:	                    EvalSink.stop(param, time);
:	                }
:	            });
:	
:	
:	        tstop.setAlarmBySpan(Time.toTickSpan(Time.SECONDS, 65)); //stops the protocol 65 seconds after constructing the assembly
:	        
:	        
:	        
:	        
:	    }
:	
:	    // Called when a frame is received or at the end of a reception period 
:	    private static int onReceive (int flags, byte[] data, int len, int info, long time) {
:	        if (data == null) { 
:	       		radio.startRx(Device.ASAP, 0, Time.currentTicks()+0x7FFFFFFF);         
:	            return 0;
:	        }
:	
:	
:			// frame received, so blink red LED and log its payload
:	
:	        if(light){
:	         	LED.setState((byte)2, (byte)1);
:	        }
:	        else{
:	        	LED.setState((byte)2, (byte)0);
:			}
:			light=!light;
:			
:			
:			
:			if (listening && active){
:				if(first){
:					Logger.appendString(csr.s2b("Sink C Listening (first): +2 "));
:					first=false;
:				}
:				else {
:					Logger.appendString(csr.s2b("Sink C Listening (discarded) "));
:				}
:	        }
:	        
:	        else {
:	        	if(active){
:		        	Logger.appendString(csr.s2b("Sink C Not listening: -3 "));
:		        }
:		        else{
:		        	Logger.appendString(csr.s2b("Sink C Inactive (discarded) "));
:		        }
:	        }
:	        Logger.appendByte(data[11]);
:	        Logger.flush(Mote.WARN);
:	        	
:	        	
:	        return 0;
:	        
:	    }
:	
:	
:	    // Called on a timer alarm
:	    public static void periodicSend(byte param, long time) {
:	        
:	        if(!active) {return;}
:	        
:	        if(nc>0){
:		        // transmit a beacon 
:	    	    radio.transmit(Device.ASAP|Radio.TXMODE_POWER_MAX, xmit, 0, 12, 0);
:	        	// program new alarm
:	        	tsend.setAlarmBySpan(wait);
:	        	nc--;
:	        	xmit[11]--;
:	        }
:	        else{
:	        	//start reception phase
:		        listening=true;
:		        first=true;
:		        
:	           	// program new alarm
:				trec.setAlarmBySpan(wait);
:	
:		        // turn green LED on 
:		        LED.setState((byte)1, (byte)1);
:		        
:	        }
:	        
:	    }
:	
:	
:	    // Called on a timer alarm, starts the protocol
:	    public static void restart(byte param, long time) {
:	        
:	        nc=n;
:	        xmit[11]=(byte)n;
:	       	tsend.setAlarmBySpan(0);
:	        
:	    }
:	
:	
:	
:	    // Called on a timer alarm, stops the reception phase
:	    public static void stopRX(byte param, long time) {
:	            // turn green LED off 
:		        LED.setState((byte)1, (byte)0);
:		        
:		        listening=false;
:		        first = false;
:		        
:		        //set alarm to restart protocol
:		    	if(active){ tstart.setAlarmBySpan(10*wait);}
:	        
:	    }
:	
:	
:	    // Called on a timer alarm, stops the protocol
:	    public static void stop(byte param, long time) {
:	        
:	        active=false;
:	        
:	        // turn yellow LED on 
:		    LED.setState((byte)0, (byte)1);
:	        
:	        
:	    }
:	
:	
:	}
